!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AE_ALL_EVENTS	ae.h	50;"	d
AE_DONT_WAIT	ae.h	51;"	d
AE_ERR	ae.h	42;"	d
AE_EXCEPTION	ae.h	46;"	d
AE_FILE_EVENTS	ae.h	48;"	d
AE_NOMORE	ae.h	53;"	d
AE_NOTUSED	ae.h	56;"	d
AE_OK	ae.h	41;"	d
AE_READABLE	ae.h	44;"	d
AE_TIME_EVENTS	ae.h	49;"	d
AE_WRITABLE	ae.h	45;"	d
AL_START_HEAD	adlist.h	61;"	d
AL_START_TAIL	adlist.h	62;"	d
ANET_ERR	anet.h	5;"	d
ANET_ERR_LEN	anet.h	6;"	d
ANET_H	anet.h	2;"	d
ANET_OK	anet.h	4;"	d
CCOPT	Makefile	/^CCOPT= $(CFLAGS)$/;"	m
CFLAGS	Makefile	/^CFLAGS?= -O2 -Wall -W -DSDS_ABORT_ON_OOM$/;"	m
DEBUG	Makefile	/^DEBUG?= -g$/;"	m
DICT_ERR	dict.h	11;"	d
DICT_HT_INITIAL_SIZE	dict.h	47;"	d
DICT_NOTUSED	dict.h	14;"	d
DICT_OK	dict.h	10;"	d
DICT_STATS_VECTLEN	dict.c	422;"	d	file:
OBJ	Makefile	/^OBJ = adlist.o ae.o anet.o dict.o redis.o sds.o picol.o$/;"	m
PICOL_BREAK	picol.h	/^enum {PICOL_OK, PICOL_ERR, PICOL_RETURN, PICOL_BREAK, PICOL_CONTINUE};$/;"	e	enum:__anon1
PICOL_CONTINUE	picol.h	/^enum {PICOL_OK, PICOL_ERR, PICOL_RETURN, PICOL_BREAK, PICOL_CONTINUE};$/;"	e	enum:__anon1
PICOL_ERR	picol.h	/^enum {PICOL_OK, PICOL_ERR, PICOL_RETURN, PICOL_BREAK, PICOL_CONTINUE};$/;"	e	enum:__anon1
PICOL_NOTUSED	picol.c	7;"	d	file:
PICOL_OK	picol.h	/^enum {PICOL_OK, PICOL_ERR, PICOL_RETURN, PICOL_BREAK, PICOL_CONTINUE};$/;"	e	enum:__anon1
PICOL_RETURN	picol.h	/^enum {PICOL_OK, PICOL_ERR, PICOL_RETURN, PICOL_BREAK, PICOL_CONTINUE};$/;"	e	enum:__anon1
PRGNAME	Makefile	/^PRGNAME = redis-server$/;"	m
PT_CMD	picol.h	/^enum {PT_ESC,PT_STR,PT_CMD,PT_VAR,PT_SEP,PT_EOL,PT_EOF};$/;"	e	enum:__anon2
PT_EOF	picol.h	/^enum {PT_ESC,PT_STR,PT_CMD,PT_VAR,PT_SEP,PT_EOL,PT_EOF};$/;"	e	enum:__anon2
PT_EOL	picol.h	/^enum {PT_ESC,PT_STR,PT_CMD,PT_VAR,PT_SEP,PT_EOL,PT_EOF};$/;"	e	enum:__anon2
PT_ESC	picol.h	/^enum {PT_ESC,PT_STR,PT_CMD,PT_VAR,PT_SEP,PT_EOL,PT_EOF};$/;"	e	enum:__anon2
PT_SEP	picol.h	/^enum {PT_ESC,PT_STR,PT_CMD,PT_VAR,PT_SEP,PT_EOL,PT_EOF};$/;"	e	enum:__anon2
PT_STR	picol.h	/^enum {PT_ESC,PT_STR,PT_CMD,PT_VAR,PT_SEP,PT_EOL,PT_EOF};$/;"	e	enum:__anon2
PT_VAR	picol.h	/^enum {PT_ESC,PT_STR,PT_CMD,PT_VAR,PT_SEP,PT_EOL,PT_EOF};$/;"	e	enum:__anon2
REDIS_CMD_BULK	redis.c	43;"	d	file:
REDIS_CMD_INLINE	redis.c	44;"	d	file:
REDIS_CONFIGLINE_MAX	redis.c	36;"	d	file:
REDIS_DEBUG	redis.c	58;"	d	file:
REDIS_DEFAULT_DBNUM	redis.c	35;"	d	file:
REDIS_EOF	redis.c	51;"	d	file:
REDIS_ERR	redis.c	27;"	d	file:
REDIS_HEAD	redis.c	54;"	d	file:
REDIS_HT_MINFILL	redis.c	39;"	d	file:
REDIS_HT_MINSLOTS	redis.c	40;"	d	file:
REDIS_LIST	redis.c	48;"	d	file:
REDIS_LOADBUF_LEN	redis.c	33;"	d	file:
REDIS_MAXIDLETIME	redis.c	31;"	d	file:
REDIS_MAX_ARGS	redis.c	34;"	d	file:
REDIS_NOTICE	redis.c	59;"	d	file:
REDIS_NOTUSED	redis.c	63;"	d	file:
REDIS_OK	redis.c	26;"	d	file:
REDIS_QUERYBUF_LEN	redis.c	32;"	d	file:
REDIS_SELECTDB	redis.c	50;"	d	file:
REDIS_SERVERPORT	redis.c	30;"	d	file:
REDIS_SET	redis.c	49;"	d	file:
REDIS_STRING	redis.c	47;"	d	file:
REDIS_TAIL	redis.c	55;"	d	file:
REDIS_WARNING	redis.c	60;"	d	file:
ResetServerSaveParams	redis.c	/^static void ResetServerSaveParams() {$/;"	f	file:
__ADLIST_H__	adlist.h	6;"	d
__AE_H__	ae.h	2;"	d
__DICT_H	dict.h	8;"	d
__SDS_H	sds.h	29;"	d
_dictAlloc	dict.c	/^static void *_dictAlloc(int size)$/;"	f	file:
_dictClear	dict.c	/^int _dictClear(dict *ht)$/;"	f
_dictExpandIfNeeded	dict.c	/^static int _dictExpandIfNeeded(dict *ht)$/;"	f	file:
_dictFree	dict.c	/^static void _dictFree(void *ptr) {$/;"	f	file:
_dictInit	dict.c	/^int _dictInit(dict *ht, dictType *type,$/;"	f
_dictKeyIndex	dict.c	/^static int _dictKeyIndex(dict *ht, const void *key)$/;"	f	file:
_dictNextPower	dict.c	/^static unsigned int _dictNextPower(unsigned int size)$/;"	f	file:
_dictPanic	dict.c	/^static void _dictPanic(const char *fmt, ...)$/;"	f	file:
_dictReset	dict.c	/^static void _dictReset(dict *ht)$/;"	f	file:
_dictStringCopyHTHashFunction	dict.c	/^static unsigned int _dictStringCopyHTHashFunction(const void *key)$/;"	f	file:
_dictStringCopyHTKeyCompare	dict.c	/^static int _dictStringCopyHTKeyCompare(void *privdata, const void *key1,$/;"	f	file:
_dictStringCopyHTKeyDestructor	dict.c	/^static void _dictStringCopyHTKeyDestructor(void *privdata, void *key)$/;"	f	file:
_dictStringCopyHTKeyDup	dict.c	/^static void *_dictStringCopyHTKeyDup(void *privdata, const void *key)$/;"	f	file:
_dictStringKeyValCopyHTValDestructor	dict.c	/^static void _dictStringKeyValCopyHTValDestructor(void *privdata, void *val)$/;"	f	file:
_dictStringKeyValCopyHTValDup	dict.c	/^static void *_dictStringKeyValCopyHTValDup(void *privdata, const void *val)$/;"	f	file:
acceptHandler	redis.c	/^static void acceptHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
addReply	redis.c	/^static void addReply(redisClient *c, robj *obj) {$/;"	f	file:
addReplySds	redis.c	/^static void addReplySds(redisClient *c, sds s) {$/;"	f	file:
aeAddMillisecondsToNow	ae.c	/^static void aeAddMillisecondsToNow(long long milliseconds, long *sec, long *ms) {$/;"	f	file:
aeCreateEventLoop	ae.c	/^aeEventLoop *aeCreateEventLoop(void) {$/;"	f
aeCreateFileEvent	ae.c	/^int aeCreateFileEvent(aeEventLoop *eventLoop, int fd, int mask,$/;"	f
aeCreateTimeEvent	ae.c	/^long long aeCreateTimeEvent(aeEventLoop *eventLoop, long long milliseconds,$/;"	f
aeDeleteEventLoop	ae.c	/^void aeDeleteEventLoop(aeEventLoop *eventLoop) {$/;"	f
aeDeleteFileEvent	ae.c	/^void aeDeleteFileEvent(aeEventLoop *eventLoop, int fd, int mask)$/;"	f
aeDeleteTimeEvent	ae.c	/^int aeDeleteTimeEvent(aeEventLoop *eventLoop, long long id)$/;"	f
aeEventFinalizerProc	ae.h	/^typedef void aeEventFinalizerProc(struct aeEventLoop *eventLoop, void *clientData);$/;"	t
aeEventLoop	ae.h	/^typedef struct aeEventLoop {$/;"	s
aeEventLoop	ae.h	/^} aeEventLoop;$/;"	t	typeref:struct:aeEventLoop
aeFileEvent	ae.h	/^typedef struct aeFileEvent {$/;"	s
aeFileEvent	ae.h	/^} aeFileEvent;$/;"	t	typeref:struct:aeFileEvent
aeFileProc	ae.h	/^typedef void aeFileProc(struct aeEventLoop *eventLoop, int fd, void *clientData, int mask);$/;"	t
aeGetTime	ae.c	/^static void aeGetTime(long *seconds, long *milliseconds)$/;"	f	file:
aeMain	ae.c	/^void aeMain(aeEventLoop *eventLoop)$/;"	f
aeProcessEvents	ae.c	/^int aeProcessEvents(aeEventLoop *eventLoop, int flags)$/;"	f
aeSearchNearestTimer	ae.c	/^static aeTimeEvent *aeSearchNearestTimer(aeEventLoop *eventLoop)$/;"	f	file:
aeStop	ae.c	/^void aeStop(aeEventLoop *eventLoop) {$/;"	f
aeTimeEvent	ae.h	/^typedef struct aeTimeEvent {$/;"	s
aeTimeEvent	ae.h	/^} aeTimeEvent;$/;"	t	typeref:struct:aeTimeEvent
aeTimeProc	ae.h	/^typedef int aeTimeProc(struct aeEventLoop *eventLoop, long long id, void *clientData);$/;"	t
anetAccept	anet.c	/^int anetAccept(char *err, int serversock, char *ip, int *port)$/;"	f
anetNonBlock	anet.c	/^int anetNonBlock(char *err, int fd)$/;"	f
anetRead	anet.c	/^int anetRead(int fd, void *buf, int count)$/;"	f
anetResolve	anet.c	/^int anetResolve(char *err, char *host, char *ipbuf)$/;"	f
anetSetError	anet.c	/^static void anetSetError(char *err, const char *fmt, ...)$/;"	f	file:
anetSetSendBuffer	anet.c	/^int anetSetSendBuffer(char *err, int fd, int buffsize)$/;"	f
anetTcpConnect	anet.c	/^int anetTcpConnect(char *err, char *addr, int port)$/;"	f
anetTcpKeepAlive	anet.c	/^int anetTcpKeepAlive(char *err, int fd)$/;"	f
anetTcpNoDelay	anet.c	/^int anetTcpNoDelay(char *err, int fd)$/;"	f
anetTcpServer	anet.c	/^int anetTcpServer(char *err, int port, char *bindaddr)$/;"	f
anetWrite	anet.c	/^int anetWrite(int fd, void *buf, int count)$/;"	f
appendServerSaveParams	redis.c	/^static void appendServerSaveParams(time_t seconds, int changes) {$/;"	f	file:
argc	redis.c	/^    int argc;$/;"	m	struct:redisClient	file:
argv	redis.c	/^    sds argv[REDIS_MAX_ARGS];$/;"	m	struct:redisClient	file:
arity	redis.c	/^    int arity;$/;"	m	struct:redisCommand	file:
bgsaveCommand	redis.c	/^static void bgsaveCommand(redisClient *c) {$/;"	f	file:
bgsaveinprogress	redis.c	/^    int bgsaveinprogress;$/;"	m	struct:redisServer	file:
buf	sds.h	/^    char buf[0];$/;"	m	struct:sdshdr
bulklen	redis.c	/^    int bulklen;    \/* bulk read len. -1 if not in bulk read mode *\/$/;"	m	struct:redisClient	file:
callframe	picol.h	/^    struct picolCallFrame *callframe;$/;"	m	struct:picolInterp	typeref:struct:picolInterp::picolCallFrame
changes	redis.c	/^    int changes;$/;"	m	struct:saveparam	file:
clientData	ae.h	/^    void *clientData;$/;"	m	struct:aeFileEvent
clientData	ae.h	/^    void *clientData;$/;"	m	struct:aeTimeEvent
clients	redis.c	/^    list *clients;$/;"	m	struct:redisServer	file:
closeTimedoutClients	redis.c	/^void closeTimedoutClients(void) {$/;"	f
cmdTable	redis.c	/^static struct redisCommand cmdTable[] = {$/;"	v	typeref:struct:redisCommand	file:
commands	picol.h	/^    struct picolCmd *commands;$/;"	m	struct:picolInterp	typeref:struct:picolInterp::picolCmd
createClient	redis.c	/^static int createClient(int fd) {$/;"	f	file:
createListObject	redis.c	/^static robj *createListObject(void) {$/;"	f	file:
createObject	redis.c	/^static robj *createObject(int type, void *ptr) {$/;"	f	file:
createSharedObjects	redis.c	/^static void createSharedObjects(void) {$/;"	f	file:
crlf	redis.c	/^    robj *crlf, *ok, *err, *zerobulk, *nil, *zero, *one, *pong;$/;"	m	struct:sharedObjectsStruct	file:
cronloops	redis.c	/^    int cronloops;$/;"	m	struct:redisServer	file:
data	adlist_mytest.c	/^}data;$/;"	t	typeref:struct:data_t	file:
data_t	adlist_mytest.c	/^typedef struct data_t {$/;"	s	file:
dbnum	redis.c	/^    int dbnum;$/;"	m	struct:redisServer	file:
dbsizeCommand	redis.c	/^static void dbsizeCommand(redisClient *c) {$/;"	f	file:
decrCommand	redis.c	/^static void decrCommand(redisClient *c) {$/;"	f	file:
decrRefCount	redis.c	/^static void decrRefCount(void *obj) {$/;"	f	file:
delCommand	redis.c	/^static void delCommand(redisClient *c) {$/;"	f	file:
dict	dict.h	/^typedef struct dict {$/;"	s
dict	dict.h	/^} dict;$/;"	t	typeref:struct:dict
dict	redis.c	/^    dict **dict;$/;"	m	struct:redisServer	file:
dict	redis.c	/^    dict *dict;$/;"	m	struct:redisClient	file:
dictAdd	dict.c	/^int dictAdd(dict *ht, void *key, void *val)$/;"	f
dictCompareHashKeys	dict.h	72;"	d
dictCreate	dict.c	/^dict *dictCreate(dictType *type,$/;"	f
dictDelete	dict.c	/^int dictDelete(dict *ht, const void *key) {$/;"	f
dictDeleteNoFree	dict.c	/^int dictDeleteNoFree(dict *ht, const void *key) {$/;"	f
dictEntry	dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictExpand	dict.c	/^int dictExpand(dict *ht, unsigned int size)$/;"	f
dictFind	dict.c	/^dictEntry *dictFind(dict *ht, const void *key)$/;"	f
dictFreeEntryKey	dict.h	61;"	d
dictFreeEntryVal	dict.h	50;"	d
dictGenHashFunction	dict.c	/^unsigned int dictGenHashFunction(const unsigned char *buf, int len) {$/;"	f
dictGenericDelete	dict.c	/^static int dictGenericDelete(dict *ht, const void *key, int nofree)$/;"	f	file:
dictGetEntryKey	dict.h	79;"	d
dictGetEntryVal	dict.h	80;"	d
dictGetHashTableSize	dict.h	81;"	d
dictGetHashTableUsed	dict.h	82;"	d
dictGetIterator	dict.c	/^dictIterator *dictGetIterator(dict *ht)$/;"	f
dictGetRandomKey	dict.c	/^dictEntry *dictGetRandomKey(dict *ht)$/;"	f
dictHashKey	dict.h	77;"	d
dictIdentityHashFunction	dict.c	/^unsigned int dictIdentityHashFunction(unsigned int key)$/;"	f
dictIntHashFunction	dict.c	/^unsigned int dictIntHashFunction(unsigned int key)$/;"	f
dictIterator	dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictNext	dict.c	/^dictEntry *dictNext(dictIterator *iter)$/;"	f
dictPrintStats	dict.c	/^void dictPrintStats(dict *ht) {$/;"	f
dictRelease	dict.c	/^void dictRelease(dict *ht)$/;"	f
dictReleaseIterator	dict.c	/^void dictReleaseIterator(dictIterator *iter)$/;"	f
dictReplace	dict.c	/^int dictReplace(dict *ht, void *key, void *val)$/;"	f
dictResize	dict.c	/^int dictResize(dict *ht)$/;"	f
dictSetHashKey	dict.h	65;"	d
dictSetHashVal	dict.h	54;"	d
dictType	dict.h	/^typedef struct dictType {$/;"	s
dictType	dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dictTypeHeapStringCopyKey	dict.c	/^dictType dictTypeHeapStringCopyKey = {$/;"	v
dictTypeHeapStringCopyKeyValue	dict.c	/^dictType dictTypeHeapStringCopyKeyValue = {$/;"	v
dictTypeHeapStrings	dict.c	/^dictType dictTypeHeapStrings = {$/;"	v
direction	adlist.h	/^    int direction;$/;"	m	struct:listIter
dirty	redis.c	/^    long long dirty;            \/* changes to DB from the last save *\/$/;"	m	struct:redisServer	file:
dup	adlist.h	/^    void *(*dup)(void *ptr);$/;"	m	struct:list
echoCommand	redis.c	/^static void echoCommand(redisClient *c) {$/;"	f	file:
el	redis.c	/^    aeEventLoop *el;$/;"	m	struct:redisServer	file:
end	picol.h	/^    char *end; \/* token end *\/$/;"	m	struct:picolParser
entry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
err	redis.c	/^    robj *crlf, *ok, *err, *zerobulk, *nil, *zero, *one, *pong;$/;"	m	struct:sharedObjectsStruct	file:
existsCommand	redis.c	/^static void existsCommand(redisClient *c) {$/;"	f	file:
fd	ae.h	/^    int fd;$/;"	m	struct:aeFileEvent
fd	redis.c	/^    int fd;$/;"	m	struct:redisClient	file:
fd	redis.c	/^    int fd;$/;"	m	struct:redisServer	file:
fileEventHead	ae.h	/^    aeFileEvent *fileEventHead;$/;"	m	struct:aeEventLoop
fileProc	ae.h	/^    aeFileProc *fileProc;$/;"	m	struct:aeFileEvent
finalizerProc	ae.h	/^    aeEventFinalizerProc *finalizerProc;$/;"	m	struct:aeFileEvent
finalizerProc	ae.h	/^    aeEventFinalizerProc *finalizerProc;$/;"	m	struct:aeTimeEvent
free	adlist.h	/^    void (*free)(void *ptr);$/;"	m	struct:list
free	sds.h	/^    long free;$/;"	m	struct:sdshdr
freeClient	redis.c	/^static void freeClient(redisClient *c) {$/;"	f	file:
freeClientArgv	redis.c	/^static void freeClientArgv(redisClient *c) {$/;"	f	file:
freeListObject	redis.c	/^static void freeListObject(robj *o) {$/;"	f	file:
freeSetObject	redis.c	/^static void freeSetObject(robj *o) {$/;"	f	file:
freeStringObject	redis.c	/^static void freeStringObject(robj *o) {$/;"	f	file:
func	picol.h	/^    picolCmdFunc func;$/;"	m	struct:picolCmd
getCommand	redis.c	/^static void getCommand(redisClient *c) {$/;"	f	file:
hashFunction	dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType
head	adlist.h	/^    listNode *head;$/;"	m	struct:list
ht	dict.h	/^    dict *ht;$/;"	m	struct:dictIterator
id	adlist_mytest.c	/^    int id;$/;"	m	struct:data_t	file:
id	ae.h	/^    long long id; \/* time event identifier. *\/$/;"	m	struct:aeTimeEvent
incrCommand	redis.c	/^static void incrCommand(redisClient *c) {$/;"	f	file:
incrDecrCommand	redis.c	/^static void incrDecrCommand(redisClient *c, int incr) {$/;"	f	file:
incrRefCount	redis.c	/^static void incrRefCount(robj *o) {$/;"	f	file:
index	dict.h	/^    int index;$/;"	m	struct:dictIterator
initServer	redis.c	/^static void initServer() {$/;"	f	file:
initServerConfig	redis.c	/^static void initServerConfig() {$/;"	f	file:
insidequote	picol.h	/^    int insidequote; \/* True if inside " " *\/$/;"	m	struct:picolParser
key	dict.h	/^    void *key;$/;"	m	struct:dictEntry
keyCompare	dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyDestructor	dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDup	dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
keysCommand	redis.c	/^static void keysCommand(redisClient *c) {$/;"	f	file:
lastinteraction	redis.c	/^    time_t lastinteraction; \/* time of the last interaction, used for timeout *\/$/;"	m	struct:redisClient	file:
lastsave	redis.c	/^    time_t lastsave;$/;"	m	struct:redisServer	file:
lastsaveCommand	redis.c	/^static void lastsaveCommand(redisClient *c) {$/;"	f	file:
len	adlist.h	/^    int len;$/;"	m	struct:list
len	picol.h	/^    int len; \/* remaining length *\/$/;"	m	struct:picolParser
len	sds.h	/^    long len;$/;"	m	struct:sdshdr
level	picol.h	/^    int level; \/* Level of nesting *\/$/;"	m	struct:picolInterp
lindexCommand	redis.c	/^static void lindexCommand(redisClient *c) {$/;"	f	file:
list	adlist.h	/^typedef struct list {$/;"	s
list	adlist.h	/^} list;$/;"	t	typeref:struct:list
listAddNodeHead	adlist.c	/^list *listAddNodeHead(list *list, void *value)$/;"	f
listAddNodeTail	adlist.c	/^list *listAddNodeTail(list *list, void *value)$/;"	f
listCreate	adlist.c	/^list *listCreate(void)$/;"	f
listDelNode	adlist.c	/^void listDelNode(list *list, listNode *node)$/;"	f
listDup	adlist.c	/^list *listDup(list *orig)$/;"	f
listFirst	adlist.h	33;"	d
listGetDupMethod	adlist.h	43;"	d
listGetFree	adlist.h	44;"	d
listGetIterator	adlist.c	/^listIter *listGetIterator(list *list, int direction)$/;"	f
listGetMatchMethod	adlist.h	45;"	d
listIndex	adlist.c	/^listNode *listIndex(list *list, int index) {$/;"	f
listIter	adlist.h	/^typedef struct listIter {$/;"	s
listIter	adlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listLast	adlist.h	34;"	d
listLength	adlist.h	32;"	d
listNextElement	adlist.c	/^listNode *listNextElement(listIter *iter)$/;"	f
listNextNode	adlist.h	36;"	d
listNode	adlist.h	/^typedef struct listNode {$/;"	s
listNode	adlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNodeValue	adlist.h	37;"	d
listPrevNode	adlist.h	35;"	d
listRelease	adlist.c	/^void listRelease(list *list)$/;"	f
listReleaseIterator	adlist.c	/^void listReleaseIterator(listIter *iter) {$/;"	f
listSearchKey	adlist.c	/^listNode *listSearchKey(list *list, void *key)$/;"	f
listSetDupMethod	adlist.h	39;"	d
listSetFreeMethod	adlist.h	40;"	d
listSetMatchMethod	adlist.h	41;"	d
llenCommand	redis.c	/^static void llenCommand(redisClient *c) {$/;"	f	file:
loadDb	redis.c	/^static int loadDb(char *filename) {$/;"	f	file:
loadServerConfig	redis.c	/^static void loadServerConfig(char *filename) {$/;"	f	file:
logfile	redis.c	/^    char *logfile;$/;"	m	struct:redisServer	file:
lookupCommand	redis.c	/^static struct redisCommand *lookupCommand(char *name) {$/;"	f	file:
lpopCommand	redis.c	/^static void lpopCommand(redisClient *c) {$/;"	f	file:
lpushCommand	redis.c	/^static void lpushCommand(redisClient *c) {$/;"	f	file:
lrangeCommand	redis.c	/^static void lrangeCommand(redisClient *c) {$/;"	f	file:
ltrimCommand	redis.c	/^static void ltrimCommand(redisClient *c) {$/;"	f	file:
main	adlist_mytest.c	/^int main() {$/;"	f
main	picol.c	/^int main(int argc, char **argv) {$/;"	f
main	redis.c	/^int main(int argc, char **argv) {$/;"	f
main	sds_mytest.c	/^int main(){$/;"	f
main	test-redis.tcl	/^proc main {server port} {$/;"	p
mask	ae.h	/^    int mask; \/* one of AE_(READABLE|WRITABLE|EXCEPTION) *\/$/;"	m	struct:aeFileEvent
match	adlist.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list
maxidletime	redis.c	/^    int maxidletime;$/;"	m	struct:redisServer	file:
moveCommand	redis.c	/^static void moveCommand(redisClient *c) {$/;"	f	file:
name	adlist_mytest.c	/^    char name[40];$/;"	m	struct:data_t	file:
name	picol.h	/^    char *name, *val;$/;"	m	struct:picolVar
name	picol.h	/^    char *name;$/;"	m	struct:picolCmd
name	redis.c	/^    char *name;$/;"	m	struct:redisCommand	file:
neterr	redis.c	/^    char neterr[ANET_ERR_LEN];$/;"	m	struct:redisServer	file:
next	adlist.h	/^    listNode *next;$/;"	m	struct:listIter
next	adlist.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
next	ae.h	/^    struct aeFileEvent *next;$/;"	m	struct:aeFileEvent	typeref:struct:aeFileEvent::aeFileEvent
next	ae.h	/^    struct aeTimeEvent *next;$/;"	m	struct:aeTimeEvent	typeref:struct:aeTimeEvent::aeTimeEvent
next	dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
next	picol.h	/^    struct picolCmd *next;$/;"	m	struct:picolCmd	typeref:struct:picolCmd::picolCmd
next	picol.h	/^    struct picolVar *next;$/;"	m	struct:picolVar	typeref:struct:picolVar::picolVar
nextEntry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
nil	redis.c	/^    robj *crlf, *ok, *err, *zerobulk, *nil, *zero, *one, *pong;$/;"	m	struct:sharedObjectsStruct	file:
objfreelist	redis.c	/^    list *objfreelist;          \/* A list of freed objects to avoid malloc() *\/$/;"	m	struct:redisServer	file:
ok	redis.c	/^    robj *crlf, *ok, *err, *zerobulk, *nil, *zero, *one, *pong;$/;"	m	struct:sharedObjectsStruct	file:
one	redis.c	/^    robj *crlf, *ok, *err, *zerobulk, *nil, *zero, *one, *pong;$/;"	m	struct:sharedObjectsStruct	file:
oom	redis.c	/^static void oom(const char *msg) {$/;"	f	file:
p	picol.h	/^    char *p; \/* current text position *\/$/;"	m	struct:picolParser
parent	picol.h	/^    struct picolCallFrame *parent; \/* parent is NULL at top level *\/$/;"	m	struct:picolCallFrame	typeref:struct:picolCallFrame::picolCallFrame
picolArityErr	picol.c	/^int picolArityErr(struct picolInterp *i, char *name) {$/;"	f
picolCallFrame	picol.h	/^struct picolCallFrame {$/;"	s
picolCmd	picol.h	/^struct picolCmd {$/;"	s
picolCmdFunc	picol.h	/^typedef int (*picolCmdFunc)(struct picolInterp *i, int argc, char **argv, void *privdata);$/;"	t
picolCommandCallProc	picol.c	/^int picolCommandCallProc(struct picolInterp *i, int argc, char **argv, void *pd) {$/;"	f
picolCommandIf	picol.c	/^int picolCommandIf(struct picolInterp *i, int argc, char **argv, void *pd) {$/;"	f
picolCommandMath	picol.c	/^int picolCommandMath(struct picolInterp *i, int argc, char **argv, void *pd) {$/;"	f
picolCommandProc	picol.c	/^int picolCommandProc(struct picolInterp *i, int argc, char **argv, void *pd) {$/;"	f
picolCommandPuts	picol.c	/^int picolCommandPuts(struct picolInterp *i, int argc, char **argv, void *pd) {$/;"	f
picolCommandRetCodes	picol.c	/^int picolCommandRetCodes(struct picolInterp *i, int argc, char **argv, void *pd) {$/;"	f
picolCommandReturn	picol.c	/^int picolCommandReturn(struct picolInterp *i, int argc, char **argv, void *pd) {$/;"	f
picolCommandSet	picol.c	/^int picolCommandSet(struct picolInterp *i, int argc, char **argv, void *pd) {$/;"	f
picolCommandWhile	picol.c	/^int picolCommandWhile(struct picolInterp *i, int argc, char **argv, void *pd) {$/;"	f
picolDropCallFrame	picol.c	/^void picolDropCallFrame(struct picolInterp *i) {$/;"	f
picolEval	picol.c	/^int picolEval(struct picolInterp *i, char *t) {$/;"	f
picolGetCommand	picol.c	/^struct picolCmd *picolGetCommand(struct picolInterp *i, char *name) {$/;"	f
picolGetToken	picol.c	/^static int picolGetToken(struct picolParser *p) {$/;"	f	file:
picolGetVar	picol.c	/^struct picolVar *picolGetVar(struct picolInterp *i, char *name) {$/;"	f
picolInitInterp	picol.c	/^void picolInitInterp(struct picolInterp *i) {$/;"	f
picolInitParser	picol.c	/^static void picolInitParser(struct picolParser *p, char *text) {$/;"	f	file:
picolInterp	picol.h	/^struct picolInterp {$/;"	s
picolParseBrace	picol.c	/^static int picolParseBrace(struct picolParser *p) {$/;"	f	file:
picolParseCommand	picol.c	/^static int picolParseCommand(struct picolParser *p) {$/;"	f	file:
picolParseComment	picol.c	/^static int picolParseComment(struct picolParser *p) {$/;"	f	file:
picolParseEol	picol.c	/^static int picolParseEol(struct picolParser *p) {$/;"	f	file:
picolParseSep	picol.c	/^static int picolParseSep(struct picolParser *p) {$/;"	f	file:
picolParseString	picol.c	/^static int picolParseString(struct picolParser *p) {$/;"	f	file:
picolParseVar	picol.c	/^static int picolParseVar(struct picolParser *p) {$/;"	f	file:
picolParser	picol.h	/^struct picolParser {$/;"	s
picolRegisterCommand	picol.c	/^int picolRegisterCommand(struct picolInterp *i, char *name, picolCmdFunc f, void *privdata) {$/;"	f
picolRegisterCoreCommands	picol.c	/^void picolRegisterCoreCommands(struct picolInterp *i) {$/;"	f
picolSetResult	picol.c	/^void picolSetResult(struct picolInterp *i, char *s) {$/;"	f
picolSetVar	picol.c	/^int picolSetVar(struct picolInterp *i, char *name, char *val) {$/;"	f
picolVar	picol.h	/^struct picolVar {$/;"	s
pingCommand	redis.c	/^static void pingCommand(redisClient *c) {$/;"	f	file:
pong	redis.c	/^    robj *crlf, *ok, *err, *zerobulk, *nil, *zero, *one, *pong;$/;"	m	struct:sharedObjectsStruct	file:
popGenericCommand	redis.c	/^static void popGenericCommand(redisClient *c, int where) {$/;"	f	file:
port	redis.c	/^    int port;$/;"	m	struct:redisServer	file:
prev	adlist.h	/^    listNode *prev;$/;"	m	struct:listIter
prev	adlist.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
privdata	dict.h	/^    void *privdata;$/;"	m	struct:dict
privdata	picol.h	/^    void *privdata;$/;"	m	struct:picolCmd
proc	redis.c	/^    redisCommandProc *proc;$/;"	m	struct:redisCommand	file:
processCommand	redis.c	/^static int processCommand(redisClient *c) {$/;"	f	file:
ptr	redis.c	/^    void *ptr;$/;"	m	struct:redisObject	file:
pushGenericCommand	redis.c	/^static void pushGenericCommand(redisClient *c, int where) {$/;"	f	file:
querybuf	redis.c	/^    sds querybuf;$/;"	m	struct:redisClient	file:
randomkeyCommand	redis.c	/^static void randomkeyCommand(redisClient *c) {$/;"	f	file:
readQueryFromClient	redis.c	/^static void readQueryFromClient(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
redisClient	redis.c	/^typedef struct redisClient {$/;"	s	file:
redisClient	redis.c	/^} redisClient;$/;"	t	typeref:struct:redisClient	file:
redisCommand	redis.c	/^struct redisCommand {$/;"	s	file:
redisCommandProc	redis.c	/^typedef void redisCommandProc(redisClient *c);$/;"	t	file:
redisLog	redis.c	/^void redisLog(int level, const char *fmt, ...)$/;"	f
redisObject	redis.c	/^typedef struct redisObject {$/;"	s	file:
redisServer	redis.c	/^struct redisServer {$/;"	s	file:
redis_bulk_read	test-redis.tcl	/^proc redis_bulk_read fd {$/;"	p
redis_connect	test-redis.tcl	/^proc redis_connect {server port} {$/;"	p
redis_dbsize	test-redis.tcl	/^proc redis_dbsize {fd} {$/;"	p
redis_decr	test-redis.tcl	/^proc redis_decr {fd key} {$/;"	p
redis_del	test-redis.tcl	/^proc redis_del {fd key} {$/;"	p
redis_exists	test-redis.tcl	/^proc redis_exists {fd key} {$/;"	p
redis_get	test-redis.tcl	/^proc redis_get {fd key} {$/;"	p
redis_incr	test-redis.tcl	/^proc redis_incr {fd key} {$/;"	p
redis_keys	test-redis.tcl	/^proc redis_keys {fd pattern} {$/;"	p
redis_lindex	test-redis.tcl	/^proc redis_lindex {fd key index} {$/;"	p
redis_llen	test-redis.tcl	/^proc redis_llen {fd key} {$/;"	p
redis_lpop	test-redis.tcl	/^proc redis_lpop {fd key} {$/;"	p
redis_lpush	test-redis.tcl	/^proc redis_lpush {fd key val} {$/;"	p
redis_lrange	test-redis.tcl	/^proc redis_lrange {fd key first last} {$/;"	p
redis_ltrim	test-redis.tcl	/^proc redis_ltrim {fd key first last} {$/;"	p
redis_move	test-redis.tcl	/^proc redis_move {fd key id} {$/;"	p
redis_multi_bulk_read	test-redis.tcl	/^proc redis_multi_bulk_read fd {$/;"	p
redis_read_integer	test-redis.tcl	/^proc redis_read_integer fd {$/;"	p
redis_read_retcode	test-redis.tcl	/^proc redis_read_retcode fd {$/;"	p
redis_readnl	test-redis.tcl	/^proc redis_readnl {fd len} {$/;"	p
redis_rename	test-redis.tcl	/^proc redis_rename {fd key1 key2} {$/;"	p
redis_renamenx	test-redis.tcl	/^proc redis_renamenx {fd key1 key2} {$/;"	p
redis_rpop	test-redis.tcl	/^proc redis_rpop {fd key} {$/;"	p
redis_rpush	test-redis.tcl	/^proc redis_rpush {fd key val} {$/;"	p
redis_select	test-redis.tcl	/^proc redis_select {fd id} {$/;"	p
redis_set	test-redis.tcl	/^proc redis_set {fd key val} {$/;"	p
redis_setnx	test-redis.tcl	/^proc redis_setnx {fd key val} {$/;"	p
redis_write	test-redis.tcl	/^proc redis_write {fd buf} {$/;"	p
redis_writenl	test-redis.tcl	/^proc redis_writenl {fd buf} {$/;"	p
refcount	redis.c	/^    int refcount;$/;"	m	struct:redisObject	file:
renameCommand	redis.c	/^static void renameCommand(redisClient *c) {$/;"	f	file:
renameGenericCommand	redis.c	/^static void renameGenericCommand(redisClient *c, int nx) {$/;"	f	file:
renamenxCommand	redis.c	/^static void renamenxCommand(redisClient *c) {$/;"	f	file:
reply	redis.c	/^    list *reply;$/;"	m	struct:redisClient	file:
resetClient	redis.c	/^static void resetClient(redisClient *c) {$/;"	f	file:
result	picol.h	/^    char *result;$/;"	m	struct:picolInterp
robj	redis.c	/^} robj;$/;"	t	typeref:struct:redisObject	file:
rpopCommand	redis.c	/^static void rpopCommand(redisClient *c) {$/;"	f	file:
rpushCommand	redis.c	/^static void rpushCommand(redisClient *c) {$/;"	f	file:
saveCommand	redis.c	/^static void saveCommand(redisClient *c) {$/;"	f	file:
saveDb	redis.c	/^static int saveDb(char *filename) {$/;"	f	file:
saveDbBackground	redis.c	/^static int saveDbBackground(char *filename) {$/;"	f	file:
saveparam	redis.c	/^struct saveparam {$/;"	s	file:
saveparams	redis.c	/^    struct saveparam *saveparams;$/;"	m	struct:redisServer	typeref:struct:redisServer::saveparam	file:
saveparamslen	redis.c	/^    int saveparamslen;$/;"	m	struct:redisServer	file:
sds	sds.h	/^typedef char *sds;$/;"	t
sdsDictHashFunction	redis.c	/^static unsigned int sdsDictHashFunction(const void *key) {$/;"	f	file:
sdsDictKeyCompare	redis.c	/^static int sdsDictKeyCompare(void *privdata, const void *key1,$/;"	f	file:
sdsDictKeyDestructor	redis.c	/^static void sdsDictKeyDestructor(void *privdata, void *val)$/;"	f	file:
sdsDictType	redis.c	/^dictType sdsDictType = {$/;"	v
sdsDictValDestructor	redis.c	/^static void sdsDictValDestructor(void *privdata, void *val)$/;"	f	file:
sdsMakeRoomFor	sds.c	/^static sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f	file:
sdsOomAbort	sds.c	/^static void sdsOomAbort(void) {$/;"	f	file:
sdsavail	sds.c	/^size_t sdsavail(sds s) {$/;"	f
sdscat	sds.c	/^sds sdscat(sds s, char *t) {$/;"	f
sdscatlen	sds.c	/^sds sdscatlen(sds s, void *t, size_t len) {$/;"	f
sdscatprintf	sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscmp	sds.c	/^int sdscmp(sds s1, sds s2) {$/;"	f
sdscpy	sds.c	/^sds sdscpy(sds s, char *t) {$/;"	f
sdscpylen	sds.c	/^sds sdscpylen(sds s, char *t, size_t len) {$/;"	f
sdsdup	sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	sds.c	/^void sdsfree(sds s) {$/;"	f
sdshdr	sds.h	/^struct sdshdr {$/;"	s
sdslen	sds.c	/^size_t sdslen(const sds s) {$/;"	f
sdsnew	sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	sds.c	/^sds sdsrange(sds s, long start, long end) {$/;"	f
sdssplitlen	sds.c	/^sds *sdssplitlen(char *s, int len, char *sep, int seplen, int *count) {$/;"	f
sdstolower	sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdsupdatelen	sds.c	/^void sdsupdatelen(sds s) {$/;"	f
seconds	redis.c	/^    time_t seconds;$/;"	m	struct:saveparam	file:
selectCommand	redis.c	/^static void selectCommand(redisClient *c) {$/;"	f	file:
selectDb	redis.c	/^static int selectDb(redisClient *c, int id) {$/;"	f	file:
sendReplyToClient	redis.c	/^static void sendReplyToClient(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
sentlen	redis.c	/^    int sentlen;$/;"	m	struct:redisClient	file:
server	redis.c	/^static struct redisServer server; \/* server global state *\/$/;"	v	typeref:struct:redisServer	file:
serverCron	redis.c	/^int serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f
setCommand	redis.c	/^static void setCommand(redisClient *c) {$/;"	f	file:
setGenericCommand	redis.c	/^static void setGenericCommand(redisClient *c, int nx) {$/;"	f	file:
setnxCommand	redis.c	/^static void setnxCommand(redisClient *c) {$/;"	f	file:
shared	redis.c	/^} shared;$/;"	v	typeref:struct:sharedObjectsStruct
sharedObjectsStruct	redis.c	/^struct sharedObjectsStruct {$/;"	s	file:
shutdownCommand	redis.c	/^static void shutdownCommand(redisClient *c) {$/;"	f	file:
size	dict.h	/^    unsigned int size;$/;"	m	struct:dict
sizemask	dict.h	/^    unsigned int sizemask;$/;"	m	struct:dict
start	picol.h	/^    char *start; \/* token start *\/$/;"	m	struct:picolParser
stop	ae.h	/^    int stop;$/;"	m	struct:aeEventLoop
stringmatchlen	redis.c	/^int stringmatchlen(const char *pattern, int patternLen,$/;"	f
table	dict.h	/^    dictEntry **table;$/;"	m	struct:dict
tail	adlist.h	/^    listNode *tail;$/;"	m	struct:list
test	test-redis.tcl	/^proc test {name code okpattern} {$/;"	p
text	picol.h	/^    char *text;$/;"	m	struct:picolParser
timeEventHead	ae.h	/^    aeTimeEvent *timeEventHead;$/;"	m	struct:aeEventLoop
timeEventNextId	ae.h	/^    long long timeEventNextId;$/;"	m	struct:aeEventLoop
timeProc	ae.h	/^    aeTimeProc *timeProc;$/;"	m	struct:aeTimeEvent
type	dict.h	/^    dictType *type;$/;"	m	struct:dict
type	picol.h	/^    int type; \/* token type, PT_... *\/$/;"	m	struct:picolParser
type	redis.c	/^    int type;$/;"	m	struct:redisCommand	file:
type	redis.c	/^    int type;$/;"	m	struct:redisObject	file:
used	dict.h	/^    unsigned int used;$/;"	m	struct:dict
val	dict.h	/^    void *val;$/;"	m	struct:dictEntry
val	picol.h	/^    char *name, *val;$/;"	m	struct:picolVar
valDestructor	dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDup	dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
value	adlist.h	/^    void *value;$/;"	m	struct:listNode
vars	picol.h	/^    struct picolVar *vars;$/;"	m	struct:picolCallFrame	typeref:struct:picolCallFrame::picolVar
verbosity	redis.c	/^    int verbosity;$/;"	m	struct:redisServer	file:
when_ms	ae.h	/^    long when_ms; \/* milliseconds *\/$/;"	m	struct:aeTimeEvent
when_sec	ae.h	/^    long when_sec; \/* seconds *\/$/;"	m	struct:aeTimeEvent
zero	redis.c	/^    robj *crlf, *ok, *err, *zerobulk, *nil, *zero, *one, *pong;$/;"	m	struct:sharedObjectsStruct	file:
zerobulk	redis.c	/^    robj *crlf, *ok, *err, *zerobulk, *nil, *zero, *one, *pong;$/;"	m	struct:sharedObjectsStruct	file:
